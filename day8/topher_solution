"""
  0:      1:      2:      3:      4:
 aaaa    ....    aaaa    aaaa    ....
b    c  .    c  .    c  .    c  b    c
b    c  .    c  .    c  .    c  b    c
 ....    ....    dddd    dddd    dddd
e    f  .    f  e    .  .    f  .    f
e    f  .    f  e    .  .    f  .    f
 gggg    ....    gggg    gggg    ....
​
  5:      6:      7:      8:      9:
 aaaa    aaaa    aaaa    aaaa    aaaa
b    .  b    .  .    c  b    c  b    c
b    .  b    .  .    c  b    c  b    c
 dddd    dddd    ....    dddd    dddd
.    f  e    f  .    f  e    f  .    f
.    f  e    f  .    f  e    f  .    f
 gggg    gggg    ....    gggg    gggg
"""
​
def buildNumber(deduce, toDecode):
    deduce = {y:x for x,y in deduce.items()}
    return int(''.join(list(map(lambda num: str(deduce[''.join(sorted(num))]), toDecode))))
​
def main(inputFile):
    with open(inputFile) as f:
        rawData = [line.rstrip().split(' | ') for line in f.readlines()]
​
    the_sum = 0
    for line in rawData:
        toAnalyse, toDecode= line[0].split(' '), line[1].split(' ')
        deduce = {}
​
        # Normalise
        for i in range(0, len(toAnalyse)):
            toAnalyse[i] = ''.join(sorted(toAnalyse[i]))
​
        unique = {
            2: 1,
            3: 7,
            4: 4,
            7: 8
        }
​
        # Step 1: Identify 1,4,7,8 as they are unique.
        for entry in filter(lambda i: len(i) in unique.keys(), toAnalyse):
            deduce[unique[len(entry)]] = entry
    
        # Step 2: Deduction: If you have len(6) and you don't have "c" and "f" from 1, then you are 6.
        deduce[6] = list(filter(lambda entry: entry not in deduce.values() and len(entry) == 6 and len(set(deduce[1]) - set(entry)) == 1, toAnalyse))[0]
​
        # Step 3: Deduction: If you have len(6), and the letter missing is in 4, then you are 0. Else, you are 9.
        deduce[9] = list(filter(lambda entry: entry not in deduce.values() and len(entry) == 6 and set(deduce[4]) - set(entry) == set(), toAnalyse))[0] 
        deduce[0] = list(filter(lambda entry: entry not in deduce.values() and len(entry) == 6 and set(deduce[4]) - set(entry) != set(), toAnalyse))[0] 
​
        # Step 4: If you have both segments of 1, then you are 3.
        deduce[3] = list(filter(lambda entry: entry not in deduce.values() and len(entry) == 5 and set(deduce[1]) - set(entry) == set(), toAnalyse))[0]
​
        # Step 5: Set difference with 4. If remaining is 1, then you are 5. If remaining is 2, then you are 2.
        deduce[5] = list(filter(lambda entry: entry not in deduce.values() and len(entry) == 5 and len(set(deduce[4]) - set(entry)) == 1, toAnalyse))[0]
        deduce[2] = list(filter(lambda entry: entry not in deduce.values() and len(entry) == 5 and len(set(deduce[4]) - set(entry)) == 2, toAnalyse))[0]
​
        the_sum += buildNumber(deduce, toDecode)
​
    print(the_sum)
​
# Running
print("Running small_input...")
main('small_input')
input()
print("Running input...")
main('input')